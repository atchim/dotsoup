#!/usr/bin/env python3

from abc import ABC, abstractmethod
from argparse import ArgumentParser
from os import environ, path

ENV = {
  'CCACHE_DIR': '/var/cache/ccache',
  'EDITOR': 'nvim',
  'GHCUP_INSTALL_BASE_PREFIX': path.expanduser('~'),
  'GOPATH': path.expanduser('~/.go'),
  'MANPATH': f'{path.expanduser("~/.local/share/man")}:{environ["MANPATH"]}',
  'PATH': [
    path.expanduser('~/.local/bin'),
    path.expanduser('~/.cabal/bin'),
    path.expanduser('~/.cargo/bin'),
    path.expanduser('~/.ghcup/bin'),
    path.expanduser('~/.go/bin'),
    '/usr/local/sbin',
    '/usr/local/bin',
    '/usr/sbin',
    '/usr/bin',
    '/usr/lib/ccache/bin',
    '/usr/lib/llvm/12/bin',
    '/opt/bin',
    '/sbin',
    '/bin',
  ],
  'SUMNEKO_LUA_DIR': path.expanduser('~/repo/lua-language-server'),
}


class Shell(ABC):
  """A shell."""

  @staticmethod
  @abstractmethod
  def export(script, var, val):
    """Export an variable in the script."""
    pass


class Bash(Shell):
  """The Bash shell."""

  @staticmethod
  def export(script, var, val):
    if isinstance(val, list): val = ':'.join(val)
    script.append(f"export {var}={val}")


class Fish(Shell):
  """The fish shell."""

  @staticmethod
  def export(script, var, val):
    if isinstance(val, list): val = ' '.join(val)
    script.append(f"set --export {var} {val}")


def get_parser():
  """Return the command line parser."""
  parser = ArgumentParser(description='print a shell script to set env')
  parser.add_argument('shell', help='specify the shell', metavar='shell')
  return parser


def get_script(sh):
  """Return the script string."""
  script = []
  for var, val in ENV.items(): sh.export(script, var, val)
  return '\n'.join(script)


if __name__ == '__main__':
  parser = get_parser()
  args = parser.parse_args()
  if args.shell == 'bash': sh = Bash
  elif args.shell == 'fish': sh = Fish
  else: raise ValueError(f'envsoup: invalid shell: {args.shell}')
  print(get_script(sh))
